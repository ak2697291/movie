#include <bits/stdc++.h>

using namespace std;

void createAdjacencyMatrix(int n, int m)
{
    int adjMat[1000][1000] = {0};
    for (int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        adjMat[u][v] = 1;
        adjMat[v][u] = 1;
    }

    cout << "printing adjacency matrix" << endl;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {

            cout << adjMat[i][j] << " ";
        }
        cout << endl;
    }
}
unordered_map<int, vector<int>> createAdjacencyList(int n, int m)
{

    vector<int> adjList[n + 1];
    unordered_map<int, vector<int>> mal;
    for (int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
        mal[u].push_back(v);
        mal[v].push_back(u);
    }

    cout << "printing adjacency list for vector" << endl;
    for (int i = 1; i <= n; i++)
    {
        cout << i << ":";
        for (auto x : adjList[i])
        {
            cout << x << " ";
        }
        cout << endl;
    }

    cout << "printing adjaceny list for map" << endl;
    for (auto i : mal)
    {
        cout << i.first << ":";
        for (auto x : i.second)
        {
            cout << x << " ";
        }
        cout << endl;
    }

    return mal;
}

void bfs(int n, unordered_map<int, vector<int>> adjMap)
{
    int vis[n];
    memset(vis, 0, sizeof(vis));
    queue<int> q;
    vis[1] = 1;
    q.push(1);

    while (!q.empty())
    {
        int f = q.front();
        cout << f << " ";
        q.pop();

        for (auto x : adjMap[f])
        {

            if (!vis[x])
            {
                vis[x] = 1;
                q.push(x);
            }
        }
    }
}
void dfs(int vis[], unordered_map<int, vector<int>> adjMap, int node)
{
    vis[node] = 1;
    cout << node << " ";

    for (auto x : adjMap[node])
    {
        if (!vis[x])
            dfs(vis, adjMap, x);
    }
}
unordered_map<int, vector<pair<int, int>>> createWeightedGraph(int n, int m)
{
    /*
    6 8
    1 2 2
    1 3 4
    2 3 1
    2 4 7
    3 5 3
    5 4 2
    4 6 1
    5 6 5
    */

    unordered_map<int, vector<pair<int, int>>> graph;
    for (int i = 0; i < m; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back(make_pair(v, w));
    }

    return graph;
}

void dijkstraAlgo(unordered_map<int, vector<pair<int, int>>> &graph, int n, int m)
{

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    unordered_map<int, int> path;
    int source = 1, end = 6;
    pq.push(make_pair(0, source));

    int distance[100];
    fill(distance, distance + 100, INT_MAX);
    distance[1] = 0;
    int minDistance = INT_MAX;
    while (!pq.empty())
    {
        pair<int, int> top = pq.top();
        pq.pop();
        int dist = top.first;
        int node = top.second;
        if (node == end)
        {
            minDistance = dist;
            break;
        }
        for (auto x : graph[node])
        {

            int curDis = x.second;
            int curNode = x.first;

            if (dist + curDis < distance[curNode])
            {
                distance[curNode] = dist + curDis;
                path[curNode] = node;
                pq.push(make_pair(distance[curNode], curNode));
            }
        }
    }
    if (minDistance != INT_MAX)
    {
        cout << endl
             << "minDistance via dijkstra algorithm is : " << minDistance << endl;

        int curNode = end;
        stack<int> s;
        while (curNode != source)
        {
            s.push(curNode);
            curNode = path[curNode];
        }
        s.push(source);
        cout << "Path Taken was : ";
        while (!s.empty())
        {
            cout << s.top() << " ";
            s.pop();
        }
    }
    else
    {
        cout << endl
             << "No path was found" << endl;
    }
}

int main()
{

    int n, m;
    cin >> n >> m;
    // adjacency matrix representation
    //  createAdjacencyMatrix(n,m);
    bool weightedGraph = true;
    if (!weightedGraph)
    {
        unordered_map<int, vector<int>> adjMap = createAdjacencyList(n, m);

        // Graph Traversal
        // BFS
        cout << "doing BFS Traversal" << endl;
        bfs(n, adjMap);
        // DFS
        cout << "doing DFS Traversal" << endl;
        int vis[n];
        memset(vis, 0, sizeof(vis));
        dfs(vis, adjMap, 1);
    }
    else
    {
        unordered_map<int, vector<pair<int, int>>> weightedGraph = createWeightedGraph(n, m);
        dijkstraAlgo(weightedGraph, n, m);
    }
}

/*
Graph Topics for Competitive Programming
1. Graph Representation & Input Handling
âœ… Adjacency List (Most used, efficient for large graphs)âœ…
âœ… Adjacency Matrix (Useful for dense graphs)âœ…
âœ… Edge List (Used in Kruskalâ€™s Algorithm)âœ…
âœ… Implicit Graphs (Grids, String Transforms, Bitmask Graphs)
ðŸ“Œ Common Edge Cases:
0-based vs 1-based indexing
Handling large inputs efficiently (Fast I/O)
Self-loops & Multiple Edges
Disconnected Graphs & Single-node Graphs

2. Graph Traversal (Fundamental & Must-Know)
âœ… Breadth-First Search (BFS) (Shortest path in an unweighted graph)âœ…
âœ… Depth-First Search (DFS) (Connected components, cycle detection)âœ…
âœ… 0/1 BFS (Shortest path in graphs with edge weights of 0 or 1)âœ…
âœ… Dijkstraâ€™s Algorithm (For weighted graphs, priority queue usage)âœ…
âœ… Bellman-Ford Algorithm (Detecting negative cycles)
âœ… Floyd-Warshall Algorithm (All-pairs shortest paths)
ðŸ“Œ Common Edge Cases:
Disconnected components
Negative weight cycles (Use Bellman-Ford)
Multiple shortest paths
Floating-point precision issues (For weighted graphs)

3. Shortest Path Algorithms (Critical for CP)
âœ… BFS for Unweighted Graphs (Fastest way to find shortest path)
âœ… Dijkstraâ€™s Algorithm (Greedy Approach)
âœ… Bellman-Ford Algorithm (Negative Weights Allowed)
âœ… Floyd-Warshall Algorithm (All-Pairs Shortest Path, O(NÂ³))
âœ… A* Algorithm (Heuristic-based pathfinding, useful in AI & Games)*
âœ… 0/1 BFS (Deque Optimization for Faster Execution)
ðŸ“Œ Common Edge Cases:
Graph with multiple shortest paths
Handling negative weights correctly
Disconnected nodes (Infinity in distance array)

4. Cycle Detection (Must-Know for Contests)
âœ… Undirected Graph Cycle Detection (DFS + Parent Check, Union-Find)
âœ… Directed Graph Cycle Detection (DFS Recursion Stack, Kahnâ€™s Algorithm)
âœ… Cycle Detection in a Graph using Disjoint Set (Union-Find Approach)
âœ… Detecting Negative Weight Cycles (Bellman-Ford Algorithm)
ðŸ“Œ Common Edge Cases:
Self-loops and multiple edges
Handling graphs with disconnected components
Cycle involving only a subset of nodes

5. Minimum Spanning Tree (MST) Algorithms
âœ… Kruskalâ€™s Algorithm (Greedy + Union-Find Approach)
âœ… Primâ€™s Algorithm (Priority Queue-Based Approach)
ðŸ“Œ Common Edge Cases:
Disconnected graphs (Handle components separately)
Multiple valid MSTs (Consider lexicographically smallest one)
Large number of edges (Use adjacency list instead of adjacency matrix)

6. Topological Sorting (Critical for DAG Problems)
âœ… Kahnâ€™s Algorithm (BFS-Based Topological Sorting)
âœ… DFS-Based Topological Sorting
âœ… Cycle Detection in a Directed Graph Using Topological Sort
ðŸ“Œ Common Edge Cases:
Multiple valid topological orderings
Graph with cycles (Not a DAG, return failure)

7. Strongly Connected Components (SCCs) & Condensation Graph
âœ… Kosarajuâ€™s Algorithm (2-pass DFS)
âœ… Tarjanâ€™s Algorithm (DFS-based, Low-Link Values)
âœ… Condensation Graph (Compressing SCCs into a DAG for further processing)
ðŸ“Œ Common Edge Cases:
Graph already strongly connected
Graph with self-loops forming SCCs

8. Graph Coloring (Used in Competitive Problems like Bipartiteness Check)
âœ… Bipartite Graph Check using BFS/DFS
âœ… Graph M-Coloring Problem (Backtracking)
ðŸ“Œ Common Edge Cases:
Odd-length cycles (Not bipartite)
Disconnected graph components

9. Eulerian Path & Circuit (Common in CP Graph Problems)
âœ… Eulerian Path vs Eulerian Circuit (Degree Conditions)
âœ… Hierholzerâ€™s Algorithm (Finding Eulerian Circuit in O(E))
ðŸ“Œ Common Edge Cases:
Disconnected components
Graph with exactly two vertices of odd degree (Eulerian Path exists but not a circuit)

10. Network Flow (Important for Advanced CP Problems)
âœ… Ford-Fulkerson Algorithm (Max Flow via Augmenting Paths)
âœ… Edmonds-Karp Algorithm (BFS-based Max Flow, O(VEÂ²))
âœ… Dinicâ€™s Algorithm (Optimized Max Flow, O(VÂ²E))
âœ… Bipartite Matching using Max Flow
ðŸ“Œ Common Edge Cases:
Graph with multiple sources & sinks
Capacity constraints & large input sizes

11. Tree Algorithms (Essential for CP Problems with Trees as Graphs)
âœ… Lowest Common Ancestor (LCA) using Binary Lifting
âœ… Tree Diameter using BFS/DFS
âœ… Heavy-Light Decomposition (Path Queries in Trees)
âœ… Centroid Decomposition (Tree Queries Optimization)
âœ… Euler Tour Technique (Flattening a Tree for Efficient Queries)
ðŸ“Œ Common Edge Cases:
Rooted vs Unrooted Trees
Handling queries on subtree nodes efficiently

12. Special Graph Algorithms (Occasionally Asked in CP Contests)
âœ… Meet-in-the-Middle Search (Bidirectional BFS for Shortest Paths)
âœ… Hopcroft-Karp Algorithm (Maximum Bipartite Matching in O(âˆšV * E))
âœ… Kargerâ€™s Algorithm (Minimum Cut using Randomized Contractions)
ðŸ“Œ Common Edge Cases:
Handling large inputs efficiently (Use appropriate data structures)

13. Grid-Based Graph Problems (Frequently Asked in CP Contests)
âœ… Flood Fill Algorithm (Connected Components in a Grid)
âœ… Lee Algorithm (Shortest Path in a Grid using BFS)
âœ… Knightâ€™s Tour Problem (Graph Representation of Chessboard)
âœ… A Algorithm (Optimized Pathfinding in a Grid)*
ðŸ“Œ Common Edge Cases:
Handling obstacles in the grid
Multiple valid shortest paths in a grid
*/